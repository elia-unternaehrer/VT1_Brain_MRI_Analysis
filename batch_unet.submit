#!/bin/bash
#SBATCH --time=5:00:00
#SBATCH --job-name=vt1_train
#SBATCH --ntasks=1
#SBATCH --cpus-per-task=16
#SBATCH --nodes=1
#SBATCH --gres=gpu:1
#SBATCH --mem=32G 
#SBATCH --partition=gpu_ia
#SBATCH --account=cai_cv
#SBATCH --mail-user=untereli@students.zhaw.ch
#SBATCH --output=/cluster/home/untereli/VT1_mri/logs/%j_train.out
#SBATCH --error=/cluster/home/untereli/VT1_mri/logs/%j_train.err
#SBATCH --signal=B:SIGUSR1@60

# Setup scratch paths
SCRATCH_OUTPUT_PATH="/scratch/results"

mkdir -p $SCRATCH_OUTPUT_PATH

sig_handler_USR1()
{
    echo "++++++++++++++++++++++++++++++++++++++"
    echo "STOP SIGNAL DETECTED -  `date`"
    echo "++++++++++++++++++++++++++++++++++++++"

    echo Backup files from $SCRATCH_OUTPUT_PATH to /cluster/home/untereli/VT1_mri/models/.
    cp -r $SCRATCH_OUTPUT_PATH/* /cluster/home/untereli/VT1_mri/models/
    sleep 5
    exit 0
}

trap 'sig_handler_USR1' USR1

# Copy dataset to scratch
cp -r /cluster/home/untereli/VT1_mri/data/ADNI /scratch

# create python venv
echo ------------------------
echo "py executable before env set/load"
python3 -c "import sys; print(f'PY version: {sys.version}'); print(f'PY path: {sys.executable}')"
echo ------------------------

env_name="vt1_env"
venv_base_dir="/raid/persistent_scratch/untereli/venvs"
venv_path="$venv_base_dir/$env_name"

if [ -d "$venv_path" ]; then
    echo "Virtual environment ($env_name) found. Activating..."
    source "$venv_path/bin/activate"
else
    echo "Virtual environment ($env_name) not found. Creating..."
    module load python/3.10.14
    virtualenv $venv_path
    unset PIP_TARGET
    unset PYTHONPATH
    source "$venv_path/bin/activate"
fi

echo ------------------------
echo "py executable after env set/load"
python3 -c "import sys; print(f'PY version: {sys.version}'); print(f'PY path: {sys.executable}')"
echo ------------------------


#check for requirements
declare -A packages
while IFS= read -r line || [ -n "$line" ]; do
    # Strip comments from the line
    line="${line%%#*}"
    # Remove trailing spaces
    line="${line%"${line##*[![:space:]]}"}"
    # Skip empty lines
    [[ -z "$line" ]] && continue
    # Split the line into package and version if it matches the pattern package==version
    if [[ "$line" =~ ^[a-zA-Z0-9_(\-\.)]+==([1-9][0-9]*!)?(0|[1-9][0-9]*)(\.(0|[1-9][0-9]*))*((a|b|rc)(0|[1-9][0-9]*))?(\.post(0|[1-9][0-9]*))?(\.dev(0|[1-9][0-9]*))?$ ]]; then
        IFS='==' read -r package version <<< "${line/==/==}"
        # Remove leading = from version
        version=${version#=}
        # Add the package and version to the associative array
        packages[$package]=$version
    else
        echo "Ignoring invalid line: $line"
    fi
done < /cluster/home/untereli/VT1_mri/requirements.txt

for package in "${!packages[@]}"; do
    version=${packages[$package]}
    installed_version=$(pip3 show $package | grep "Version:" | cut -d' ' -f2)
    if [ -z "$installed_version" ]; then
        echo "Installing $package==$version..."
        pip3 install "$package==$version"
    elif [ "$installed_version" != "$version" ]; then
        echo "$package is installed but version $installed_version is not the required version $version. Updating..."
        pip3 install "$package==$version"
    fi
done

# Launch training
python3 /cluster/home/untereli/VT1_mri/src/run_unet_sbatch.py

# wait for all background jobs to finish!
wait

# Backup results
cp -r $SCRATCH_OUTPUT_PATH/* /cluster/home/untereli/VT1_mri/models/